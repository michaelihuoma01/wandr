// Complete Firestore Security Rules for Wandr App with Social Vibe Circles

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isCircleMember(circleId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
    }
    
    function getCircleMembership(circleId, userId) {
      return get(/databases/$(database)/documents/circles/$(circleId)/members/$(userId));
    }
    
    function isCircleAdmin(circleId) {
      return isAuthenticated() && 
        getCircleMembership(circleId, request.auth.uid).data.role == 'admin';
    }
    
    function isCircleModerator(circleId) {
      return isAuthenticated() && 
        getCircleMembership(circleId, request.auth.uid).data.role in ['admin', 'moderator'];
    }
    
    function isPublicCircle(circleId) {
      return get(/databases/$(database)/documents/circles/$(circleId)).data.isPublic == true;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Never allow deletion
      
      // User's circles subcollection
      match /circles/{circleId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Visits collection (check-ins)
    match /visits/{visitId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         (resource.data.circleId != null && isCircleMember(resource.data.circleId)));
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Circles collection
    match /circles/{circleId} {
      // Allow read if circle is public or user is a member
      allow read: if isPublicCircle(circleId) || isCircleMember(circleId);
      
      // Allow create if authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.creatorId == request.auth.uid &&
        request.resource.data.memberCount == 1;
      
      // Allow update only by admin
      allow update: if isCircleAdmin(circleId) &&
        // Prevent changing creator
        (!('creatorId' in request.resource.data) || 
         request.resource.data.creatorId == resource.data.creatorId);
      
      // Allow delete only by creator
      allow delete: if isOwner(resource.data.creatorId);
      
      // Members subcollection
      match /members/{memberId} {
        // Allow read if user is a member of the circle
        allow read: if isCircleMember(circleId);
        
        // Allow create if:
        // 1. User is joining themselves (member role only)
        // 2. Admin is adding someone
        allow create: if isAuthenticated() && 
          ((memberId == request.auth.uid && 
            request.resource.data.role == 'member' &&
            request.resource.data.userId == request.auth.uid) ||
           isCircleAdmin(circleId));
        
        // Allow update by admin or self (for notification settings)
        allow update: if isCircleAdmin(circleId) || 
          (memberId == request.auth.uid && 
           request.resource.data.role == resource.data.role);
        
        // Allow delete by admin or self (leaving circle)
        allow delete: if isCircleAdmin(circleId) || memberId == request.auth.uid;
      }
      
      // Activity subcollection
      match /activity/{activityId} {
        // Allow read if member
        allow read: if isCircleMember(circleId);
        
        // Allow create if member and activity is by them
        allow create: if isCircleMember(circleId) && 
          request.resource.data.userId == request.auth.uid;
        
        // Allow update for likes and comments by members
        allow update: if isCircleMember(circleId) &&
          // Only allow updating likes and comments arrays
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'comments']);
        
        // Allow delete by creator or admin
        allow delete: if isOwner(resource.data.userId) || isCircleAdmin(circleId);
      }
      
      // Boards subcollection (Vibe Boards)
      match /boards/{boardId} {
        // Allow read if member
        allow read: if isCircleMember(circleId);
        
        // Allow create if member
        allow create: if isCircleMember(circleId) && 
          request.resource.data.creatorId == request.auth.uid;
        
        // Allow update by creator or for likes/saves
        allow update: if isOwner(resource.data.creatorId) ||
          (isCircleMember(circleId) && 
           request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['likeCount', 'saveCount', 'likedBy', 'savedBy']));
        
        // Allow delete by creator or admin
        allow delete: if isOwner(resource.data.creatorId) || isCircleAdmin(circleId);
      }
      
      // Micro Reviews subcollection
      match /microReviews/{reviewId} {
        // Allow read if member
        allow read: if isCircleMember(circleId);
        
        // Allow create if member
        allow create: if isCircleMember(circleId) && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.quickTake.size() <= 280; // Enforce character limit
        
        // Allow update by creator or for likes
        allow update: if isOwner(resource.data.userId) ||
          (isCircleMember(circleId) && 
           request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['likeCount', 'likedBy']));
        
        // Allow delete by creator or admin
        allow delete: if isOwner(resource.data.userId) || isCircleAdmin(circleId);
      }
      
      // Join Requests subcollection
      match /joinRequests/{requestId} {
        // Allow read by admins and the requester
        allow read: if isCircleAdmin(circleId) || requestId == request.auth.uid;
        
        // Allow create by the requester
        allow create: if isAuthenticated() && 
          requestId == request.auth.uid &&
          request.resource.data.userId == request.auth.uid;
        
        // Allow update only by admin (to approve/reject)
        allow update: if isCircleAdmin(circleId);
        
        // Allow delete by admin or requester
        allow delete: if isCircleAdmin(circleId) || requestId == request.auth.uid;
      }
    }
    
    // Notifications collection
    match /notifications/{userId} {
      allow read: if isOwner(userId);
      allow create: if false; // Only cloud functions should create
      allow update: if isOwner(userId) && 
        // Only allow marking as read
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if isOwner(userId);
      
      // Circle notifications subcollection
      match /circle_notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if false; // Only cloud functions should create
        allow update: if isOwner(userId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
        allow delete: if isOwner(userId);
      }
    }
    
    // Search history (if you want to store it in Firestore instead of local storage)
    match /searchHistory/{historyId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Search history shouldn't be updated
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Global stats or featured circles (admin only)
    match /featured/{documentId} {
      allow read: if true; // Public read
      allow write: if false; // Admin SDK only
    }
    
    // Reports collection (for reporting inappropriate content)
    match /reports/{reportId} {
      allow read: if false; // Admin only
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      allow update: if false; // Admin only
      allow delete: if false; // Never delete reports
    }
  }
}