rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // Enhanced Users collection with privacy controls
    match /users/{userId} {
      // Users can always read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Other users can read based on privacy settings
      allow read: if request.auth != null && 
                 request.auth.uid != userId &&
                 canReadUserProfile(userId, request.auth.uid);
      
      // Validate enhanced user data structure on writes
      allow write: if request.auth != null && 
                  request.auth.uid == userId &&
                  validateEnhancedUserData(request.resource.data);
    }

    // Circles collection
    match /circles/{circleId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.createdBy ||
                    request.auth.uid in resource.data.memberIds);
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }

    // Circle members subcollection
    match /circles/{circleId}/members/{memberId} {
      allow read, write: if request.auth != null;
    }

    // Places collection
    match /places/{placeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    // Allow temporary access for development
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 12, 31);
    }
    // Enhanced visits collection with new fields
    match /visits/{visitId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId &&
                   validateVisitData(request.resource.data);
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   validateVisitUpdate(request.resource.data);
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // User vibe scores collection
    match /user_vibe_scores/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Public check-in stories (for discovery)
    match /public_stories/{storyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId &&
                   request.resource.data.isStoryPublic == true;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    function validateVisitData(data) {
      return data.keys().hasAll(['userId', 'placeId', 'placeName', 'placeType', 'latitude', 'longitude', 'visitTime', 'isManualCheckIn']) &&
             data.userId is string &&
             data.placeId is string &&
             data.placeName is string &&
             data.placeType is string &&
             data.latitude is number &&
             data.longitude is number &&
             data.visitTime is timestamp &&
             data.isManualCheckIn is bool &&
             (data.vibes is list || !data.keys().hasAny(['vibes'])) &&
             (data.rating == null || (data.rating is number && data.rating >= 1 && data.rating <= 5)) &&
             (data.vibeCred == null || (data.vibeCred is number && data.vibeCred >= 0)) &&
             (data.photoCredibilityScore == null || (data.photoCredibilityScore is number && data.photoCredibilityScore >= 0 && data.photoCredibilityScore <= 1));
    }

    function validateVisitUpdate(data) {
      return validateVisitData(data) &&
             data.userId == resource.data.userId &&
             data.placeId == resource.data.placeId;
    }

    // Enhanced user profile validation
    function validateEnhancedUserData(data) {
      return data.keys().hasAll(['id', 'name', 'email', 'createdAt', 'lastLogin', 
                                'vibeProfile', 'tasteSignature', 'behavioralSignals',
                                'onboardingData', 'privacySettings', 'notificationPreferences',
                                'profileLastUpdated', 'appVersion']) &&
             data.id is string &&
             data.name is string &&
             data.email is string &&
             data.createdAt is timestamp &&
             data.lastLogin is timestamp &&
             validateVibeProfile(data.vibeProfile) &&
             validatePrivacySettings(data.privacySettings) &&
             data.profileLastUpdated is timestamp &&
             data.appVersion is string;
    }

    function validateVibeProfile(vibeProfile) {
      return vibeProfile.keys().hasAll(['primaryVibes', 'vibeScores', 'vibeEvolution', 
                                       'contextualVibes', 'lastUpdated']) &&
             vibeProfile.primaryVibes is list &&
             vibeProfile.primaryVibes.size() <= 8 &&
             vibeProfile.vibeScores is map &&
             vibeProfile.vibeEvolution is list &&
             vibeProfile.contextualVibes is map &&
             vibeProfile.lastUpdated is timestamp;
    }

    function validatePrivacySettings(privacySettings) {
      return privacySettings.keys().hasAll(['vibeVisibility', 'locationSharing', 
                                           'activityPrivacyLevel', 'allowVibeMatching']) &&
             privacySettings.vibeVisibility is bool &&
             privacySettings.locationSharing is bool &&
             privacySettings.activityPrivacyLevel in ['public', 'circles', 'private'] &&
             privacySettings.allowVibeMatching is bool;
    }

    // Privacy-aware user profile reading
    function canReadUserProfile(targetUserId, requestingUserId) {
      // Get target user's privacy settings
      let targetUser = get(/databases/$(database)/documents/users/$(targetUserId));
      let privacySettings = targetUser.data.privacySettings;
      
      // Public profiles can always be read
      if (privacySettings.activityPrivacyLevel == 'public') {
        return true;
      }
      
      // Private profiles cannot be read by others
      if (privacySettings.activityPrivacyLevel == 'private') {
        return false;
      }
      
      // Circle-level privacy: check if users share circles
      if (privacySettings.activityPrivacyLevel == 'circles') {
        return shareCircles(targetUserId, requestingUserId);
      }
      
      return false;
    }

    function shareCircles(user1Id, user2Id) {
      // Check if users are in any common circles
      let user1Memberships = get(/databases/$(database)/documents/circle_memberships/$(user1Id)).data;
      let user2Memberships = get(/databases/$(database)/documents/circle_memberships/$(user2Id)).data;
      
      // This is a simplified check - in practice you'd query the memberships collection
      return true; // Placeholder - implement based on your membership structure
    }

    // Vibe matching cache collection
    match /vibe_match_cache/{cacheId} {
      allow read, write: if request.auth != null && 
                        cacheId.split('_')[0] == request.auth.uid;
    }

    // Boards collection with enhanced privacy
    match /boards/{boardId} {
      allow read: if request.auth != null && 
                 (resource.data.isPublic == true || 
                  request.auth.uid == resource.data.createdBy ||
                  canAccessPrivateBoard(boardId, request.auth.uid));
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.createdBy;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.createdBy;
    }

    function canAccessPrivateBoard(boardId, userId) {
      // Check if user has been granted access to private board
      // This could be through circle membership or direct sharing
      return false; // Implement based on your sharing logic
    }

    // Circle memberships collection
    match /circle_memberships/{membershipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.userId ||
                    isCircleAdmin(resource.data.circleId, request.auth.uid));
      allow delete: if request.auth != null && 
                   (request.auth.uid == resource.data.userId ||
                    isCircleAdmin(resource.data.circleId, request.auth.uid));
    }

    function isCircleAdmin(circleId, userId) {
      let circle = get(/databases/$(database)/documents/circles/$(circleId));
      return circle.data.createdBy == userId;
    }
  }
}